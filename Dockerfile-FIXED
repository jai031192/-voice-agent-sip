# ---------- BUILD STAGE ----------
FROM golang:1.24-bullseye AS builder

# Cache bust argument - change this to force rebuild
ARG CACHEBUST=1
RUN echo "Build timestamp: $(date)" 
 
# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    libopus-dev \
    libopusfile-dev \
    libsoxr0 libsoxr-dev \
    libsamplerate0-dev \
    git \
    jq \
    wget \
    curl \
    bash \
&& rm -rf /var/lib/apt/lists/*
 
# Set working directory
WORKDIR /app
 
# Install LiveKit CLI and Server
RUN curl -sSL https://get.livekit.io/cli | bash
RUN curl -sSL https://get.livekit.io | bash
 
# Copy Go module files and download dependencies
COPY go.mod ./
RUN go mod download || true
 
# Copy source code
COPY . .
 
# Build the SIP binary
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo \
    -ldflags '-w -s' \
    -o /app/sip-app ./cmd/livekit-sip
 
# Make binaries executable
RUN chmod +x /app/sip-app
 
# ---------- RUNTIME STAGE ----------
FROM ubuntu:24.04
 
# Install runtime dependencies + Redis
RUN apt-get update && apt-get install -y \
    opus-tools \
    libopus-dev \
    libopusfile-dev \
    libsoxr0 \
    libsamplerate0 \
    redis-server \
    ca-certificates \
    tzdata \
    wget \
    curl \
    bash \
    supervisor \
&& rm -rf /var/lib/apt/lists/*
 
# Create a non-root user
RUN groupadd -g 1001 livekit && useradd -u 1001 -g livekit -m livekit
 
# Set working directory
WORKDIR /app
 
# Copy SIP binary and LiveKit server from builder
COPY --from=builder /app/sip-app /app/sip-app
COPY --from=builder /usr/local/bin/livekit-server /usr/local/bin/livekit-server
 
# Copy config files
COPY config.yaml /app/config.yaml
COPY livekit-config.yaml /app/livekit-config.yaml

# Create startup script to handle environment variables
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Set default environment variables (can be overridden by container runtime)' >> /app/start.sh && \
    echo 'export EXTERNAL_IP=${EXTERNAL_IP:-"40.81.229.194"}' >> /app/start.sh && \
    echo 'export LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-"API5DcPxqyBDHLr"}' >> /app/start.sh && \
    echo 'export LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-"b9dgi6VEHsXf1zLKFWffHONECta5Xvfs5ejgdZhUoxPE"}' >> /app/start.sh && \
    echo 'export LIVEKIT_WS_URL=${LIVEKIT_WS_URL:-"ws://localhost:7880"}' >> /app/start.sh && \
    echo 'export SIP_USERNAME=${SIP_USERNAME:-"00919240908080"}' >> /app/start.sh && \
    echo 'export SIP_PASSWORD=${SIP_PASSWORD:-"1234"}' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Debug: Show environment variables' >> /app/start.sh && \
    echo 'echo "Container starting with environment:"' >> /app/start.sh && \
    echo 'echo "EXTERNAL_IP=$EXTERNAL_IP"' >> /app/start.sh && \
    echo 'echo "LIVEKIT_API_KEY=$LIVEKIT_API_KEY"' >> /app/start.sh && \
    echo 'echo "LIVEKIT_WS_URL=$LIVEKIT_WS_URL"' >> /app/start.sh && \
    echo 'echo "SIP_USERNAME=$SIP_USERNAME"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Start supervisor (environment variables will be inherited)' >> /app/start.sh && \
    echo 'exec /usr/bin/supervisord -c /etc/supervisor/supervisord.conf' >> /app/start.sh && \
    chmod +x /app/start.sh
 
# Create supervisor config to manage multiple services
RUN mkdir -p /etc/supervisor/conf.d /var/log /var/run

# Create main supervisor configuration file with explicit content
RUN echo '[unix_http_server]' > /etc/supervisor/supervisord.conf && \
    echo 'file=/var/run/supervisor.sock' >> /etc/supervisor/supervisord.conf && \
    echo 'chmod=0700' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[supervisord]' >> /etc/supervisor/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/supervisord.conf && \
    echo 'logfile=/var/log/supervisord.log' >> /etc/supervisor/supervisord.conf && \
    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisor/supervisord.conf && \
    echo 'childlogdir=/var/log' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[rpcinterface:supervisor]' >> /etc/supervisor/supervisord.conf && \
    echo 'supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[supervisorctl]' >> /etc/supervisor/supervisord.conf && \
    echo 'serverurl=unix:///var/run/supervisor.sock' >> /etc/supervisor/supervisord.conf && \
    echo '' >> /etc/supervisor/supervisord.conf && \
    echo '[include]' >> /etc/supervisor/supervisord.conf && \
    echo 'files = /etc/supervisor/conf.d/*.conf' >> /etc/supervisor/supervisord.conf

# Create program configuration with explicit content
RUN echo '[program:redis]' > /etc/supervisor/conf.d/programs.conf && \
    echo 'command=redis-server --bind 0.0.0.0 --port 6379' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'user=redis' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stdout_logfile=/var/log/redis.log' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stderr_logfile=/var/log/redis.log' >> /etc/supervisor/conf.d/programs.conf && \
    echo '' >> /etc/supervisor/conf.d/programs.conf && \
    echo '[program:livekit]' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'command=/usr/local/bin/livekit-server --config /app/livekit-config.yaml' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'user=livekit' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stdout_logfile=/var/log/livekit.log' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stderr_logfile=/var/log/livekit.log' >> /etc/supervisor/conf.d/programs.conf && \
    echo '' >> /etc/supervisor/conf.d/programs.conf && \
    echo '[program:sip]' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'command=/app/sip-app --config /app/config.yaml' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'user=livekit' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stdout_logfile=/var/log/sip.log' >> /etc/supervisor/conf.d/programs.conf && \
    echo 'stderr_logfile=/var/log/sip.log' >> /etc/supervisor/conf.d/programs.conf

# Verify configuration files were created correctly and set permissions
RUN ls -la /etc/supervisor/ && \
    ls -la /etc/supervisor/conf.d/ && \
    cat /etc/supervisor/supervisord.conf && \
    echo "--- Programs Config ---" && \
    cat /etc/supervisor/conf.d/programs.conf && \
    chmod 644 /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/programs.conf
 
# Make binaries executable
RUN chmod +x /app/sip-app /usr/local/bin/livekit-server

# Test supervisor configuration syntax only (without starting services)
RUN python3 -c "import configparser; import sys; config = configparser.ConfigParser(); config.read('/etc/supervisor/supervisord.conf'); assert 'supervisord' in config.sections(), 'Missing supervisord section'; config.read('/etc/supervisor/conf.d/programs.conf'); assert 'program:redis' in config.sections(), 'Missing redis program'; assert 'program:livekit' in config.sections(), 'Missing livekit program'; assert 'program:sip' in config.sections(), 'Missing sip program'; print('Supervisor configuration validation passed successfully')"
 
# Expose ports
EXPOSE 5170/tcp 5170/udp 7880/tcp 8080/tcp 6379/tcp 9090/tcp 6000-65531/udp
 
# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1
 
# Use startup script to handle environment variables and start supervisor
CMD ["/app/start.sh"]