# LiveKit SIP CI/CD Pipeline for Azure Production Deployment
# 
# Simplified deployment pipeline for main branch only
# Deploys directly to production on Azure Container Apps
# 
# Production Configuration:
# - Server IP: 40.81.229.194
# - MONKHUB SIP Provider: 00919240908080
# - Azure Container App: va-cicd
# - Resource Group: voice-agent-resource-group
#
# Required Secrets:
# - AZURE_CLIENT_ID, AZURE_TENANT_ID (for Azure authentication)
# - LIVEKIT_API_KEY: d6212ffd426f199fe1759c6370c85155
# - LIVEKIT_API_SECRET: 6a7b312f5643020c86ceeef8785824e01f6ab1bd35394db1abf9d62e900ae23e
# - SIP_USERNAME: 00919240908080
# - SIP_PASSWORD: 1234

name: LiveKit SIP CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: voiceagent.azurecr.io
  IMAGE_NAME: livekit-sip-service
  GO_VERSION: '1.24'
  AZURE_SUBSCRIPTION_ID: '00c9672f-2264-4555-a212-f212d309f897'
  AZURE_RESOURCE_GROUP: 'voice-agent-resource-group'
  AZURE_CONTAINER_APP: 'va-cicd'

# Required for OIDC authentication with Azure
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # ==============================================================================
  # ENVIRONMENT SETUP (Simplified for main branch only)
  # ==============================================================================
  setup:
    name: Environment Setup
    runs-on: ubuntu-latest
    outputs:
      environment: production
      deploy: true
      external_ip: 40.81.229.194
      config_file: config.yaml
    steps:
      - name: Set Production Environment
        run: |
          echo "Deploying to production from main branch"
          echo "External IP: 40.81.229.194"
          echo "Target: Azure Container Apps"

  # ==============================================================================
  # CODE QUALITY & SECURITY
  # ==============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          # Install required system dependencies for audio libraries
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libopus-dev \
            libopusfile-dev \
            libsoxr-dev \
            libsamplerate0-dev

      - name: Download Go modules
        run: go mod download

      - name: Go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Security scan with gosec
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./... || echo "Security scan completed with warnings"

  # ==============================================================================
  # TESTING
  # ==============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [setup, code-quality]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libopus-dev \
            libopusfile-dev \
            libsoxr-dev \
            libsamplerate0-dev \
            redis-tools

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Run integration tests
        env:
          REDIS_ADDR: localhost:6379
          LIVEKIT_URL: ws://localhost:7880
        run: |
          # Start a minimal LiveKit server for testing (if available)
          # go test -v -tags=integration ./...
          echo "Integration tests would run here with real Redis"

      - name: Test Redis connectivity
        run: |
          redis-cli ping
          redis-cli set test-key "test-value"
          redis-cli get test-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # ==============================================================================
  # BUILD
  # ==============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: always() && !cancelled() && (needs.test.result == 'success' || inputs.skip_tests)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libopus-dev \
            libopusfile-dev \
            libsoxr-dev \
            libsamplerate0-dev

      - name: Build binary
        run: |
          # Build static binary for production
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -a -ldflags '-linkmode external -extldflags "-static"' \
          -o sip-service ./cmd/livekit-sip

      - name: Test binary
        run: |
          ./sip-service --help

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: sip-service-binary
          path: sip-service
          retention-days: 7

  # ==============================================================================
  # DOCKER BUILD & PUSH
  # ==============================================================================
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: sip-service-binary

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Prepare build context
        run: |
          # Copy deployment configs to build context
          cp livekit-sip-deployment/Dockerfile .
          cp livekit-sip-deployment/config.yaml ./config-production.yaml
          cp livekit-sip-deployment/livekit-config.yaml .
          
          # Update config for environment
          sed -i "s/localhost:6379/redis:6379/g" config-production.yaml
          sed -i "s/localhost:7880/localhost:7880/g" config-production.yaml
          sed -i "s/external_ip: .*/external_ip: \"${{ needs.setup.outputs.external_ip }}\"/g" config-production.yaml

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/amd64

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ==============================================================================
  # SECURITY SCANNING
  # ==============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker]
    if: needs.setup.outputs.deploy == 'true'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # DEPLOY TO STAGING
  # ==============================================================================
  # DEPLOY TO PRODUCTION (Main Branch Only)
  # ==============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, docker, security-scan]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Create backup of current deployment
        run: |
          # Get current revision for rollback capability
          CURRENT_REVISION=$(az containerapp revision list \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query '[0].name' -o tsv 2>/dev/null || echo "none")
          echo "BACKUP_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp update \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
              EXTERNAL_IP="40.81.229.194" \
              LIVEKIT_API_KEY="${{ secrets.LIVEKIT_API_KEY }}" \
              LIVEKIT_API_SECRET="${{ secrets.LIVEKIT_API_SECRET }}" \
              SIP_USERNAME="${{ secrets.SIP_USERNAME }}" \
              SIP_PASSWORD="${{ secrets.SIP_PASSWORD }}" \
              REDIS_URL="redis://40.81.229.194:6379" \
              LIVEKIT_WS_URL="ws://40.81.229.194:7880" \
            --revision-suffix ${{ github.sha }}

      - name: Health check production
        id: health_check
        run: |
          echo "Waiting for production deployment..."
          sleep 90
          
          # Test production endpoints
          PROD_IP="40.81.229.194"
          
          # Test health endpoint
          curl -f http://$PROD_IP:8080/health || exit 1
          
          # Test SIP port (basic connectivity)
          nc -z $PROD_IP 5170 || exit 1
          
          echo "Production deployment health check passed!"

      - name: Rollback on failure
        if: failure() && steps.health_check.outcome == 'failure'
        run: |
          if [ "${{ env.BACKUP_REVISION }}" != "none" ]; then
            echo "Health check failed, rolling back to previous revision..."
            az containerapp revision set-active \
              --name ${{ env.AZURE_CONTAINER_APP }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --revision-name ${{ env.BACKUP_REVISION }}
          fi
          exit 1

  # ==============================================================================
  # POST-DEPLOYMENT TESTING
  # ==============================================================================
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set target environment
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            echo "TARGET_IP=${{ secrets.AZURE_EXTERNAL_IP }}" >> $GITHUB_ENV
          else
            echo "TARGET_IP=${{ secrets.STAGING_EXTERNAL_IP }}" >> $GITHUB_ENV
          fi

      - name: Comprehensive health check
        run: |
          echo "Running comprehensive health checks on $TARGET_IP..."
          
          # Test all service endpoints
          curl -f http://$TARGET_IP:8080/health
          curl -f http://$TARGET_IP:7880
          
          # Test SIP port connectivity
          nc -z $TARGET_IP 5170
          
          # Test Redis connectivity (if exposed)
          # nc -z $TARGET_IP 6379
          
          echo "All health checks passed!"

      - name: Load testing (staging only)
        if: needs.setup.outputs.environment == 'staging'
        run: |
          # Install load testing tools
          npm install -g artillery
          
          # Run basic load test
          # artillery run load-test.yml
          echo "Load testing would run here for staging environment"

  # ==============================================================================
  # NOTIFICATIONS
  # ==============================================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, deploy-production, post-deployment-tests]
    if: always()
    
    steps:
      - name: Determine status
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "STATUS=✅ Production deployment successful" >> $GITHUB_ENV
            echo "COLOR=good" >> $GITHUB_ENV
          else
            echo "STATUS=❌ Deployment failed" >> $GITHUB_ENV
            echo "COLOR=danger" >> $GITHUB_ENV
          fi

      - name: Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ env.COLOR }}',
                title: 'LiveKit SIP Deployment',
                text: '${{ env.STATUS }}',
                fields: [{
                  title: 'Environment',
                  value: '${{ needs.setup.outputs.environment }}',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}